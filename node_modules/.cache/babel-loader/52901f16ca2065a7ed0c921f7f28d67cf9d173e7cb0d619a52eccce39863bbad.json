{"ast":null,"code":"var _jsxFileName = \"C:\\\\developeWeb\\\\FrontEndReact\\\\src\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport PeliculaCard from \"./PeliculaCard\";\nimport SearchIcon from \"./search.svg\";\nimport { API_URL } from \"./App.jsx\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [peliculas, setPeliculas] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const buscarPeliculas = async titulo => {\n    if (!titulo) {\n      // Si el término de búsqueda está vacío, no hagas la solicitud\n      return;\n    }\n    try {\n      const response = await fetch(`${API_URL}?s=${titulo}`);\n      const data = await response.json();\n      if (data && data.Search) {\n        // Verifica si se encontraron películas en la respuesta\n        setPeliculas(data.Search);\n      } else {\n        // Si no se encontraron películas, establece el estado en un array vacío\n        setPeliculas([]);\n      }\n    } catch (error) {\n      console.error('Error al buscar películas:', error);\n      // Maneja el error de manera apropiada\n    }\n  };\n  useEffect(() => {\n    // Llama a la función de búsqueda al cargar la página con el término de búsqueda inicial vacío\n    buscarPeliculas('');\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Buscar pel\\xEDculas por t\\xEDtulo\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: SearchIcon,\n        alt: \"Buscar\",\n        onClick: () => buscarPeliculas(searchTerm)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), peliculas.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: peliculas.map(pelicula => /*#__PURE__*/_jsxDEV(PeliculaCard, {\n        pelicula: pelicula\n      }, pelicula.imdbID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No se encontraron pel\\xEDculas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(Home, \"oXtZwo2Domcf1J4Ju+iEgYTXEYU=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","PeliculaCard","SearchIcon","API_URL","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","peliculas","setPeliculas","searchTerm","setSearchTerm","buscarPeliculas","titulo","response","fetch","data","json","Search","error","console","children","className","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onClick","length","map","pelicula","imdbID","_c","$RefreshReg$"],"sources":["C:/developeWeb/FrontEndReact/src/Home.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport PeliculaCard from \"./PeliculaCard\";\nimport SearchIcon from \"./search.svg\";\nimport { API_URL } from \"./App.jsx\";\n\nfunction Home() {\n    const [peliculas, setPeliculas] = useState([]);\n    const [searchTerm, setSearchTerm] = useState('');\n\n    const buscarPeliculas = async (titulo) => {\n        if (!titulo) {\n            // Si el término de búsqueda está vacío, no hagas la solicitud\n            return;\n        }\n\n        try {\n            const response = await fetch(`${API_URL}?s=${titulo}`);\n            const data = await response.json();\n\n            if (data && data.Search) {\n                // Verifica si se encontraron películas en la respuesta\n                setPeliculas(data.Search);\n            } else {\n                // Si no se encontraron películas, establece el estado en un array vacío\n                setPeliculas([]);\n            }\n        } catch (error) {\n            console.error('Error al buscar películas:', error);\n            // Maneja el error de manera apropiada\n        }\n    };\n\n    useEffect(() => {\n        // Llama a la función de búsqueda al cargar la página con el término de búsqueda inicial vacío\n        buscarPeliculas('');\n    }, []);\n\n    return (\n        <>\n            <div className=\"search\">\n                <input\n                    placeholder=\"Buscar películas por título\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                />\n                <img\n                    src={SearchIcon}\n                    alt=\"Buscar\"\n                    onClick={() => buscarPeliculas(searchTerm)}\n                />\n            </div>\n\n            {peliculas.length > 0 ? (\n                <div className=\"container\">\n                    {peliculas.map((pelicula) => (\n                        <PeliculaCard pelicula={pelicula} key={pelicula.imdbID} />\n                    ))}\n                </div>\n            ) : (\n                <div className=\"empty\">\n                    <h2>No se encontraron películas</h2>\n                </div>\n            )}\n        </>\n    );\n}\n\nexport default Home;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}